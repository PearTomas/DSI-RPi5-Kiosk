#!/usr/bin/env bash
set -euo pipefail

echo "== Chromium Kiosk (labwc) installer =="

# --- check deps ---------------------------------------------------------------
need_cmd() { command -v "$1" >/dev/null 2>&1; }
missing=()

if ! need_cmd wlr-randr; then
  missing+=("wlr-randr")
fi

CHROMIUM_BIN=""
if need_cmd chromium-browser; then
  CHROMIUM_BIN="$(command -v chromium-browser)"
elif need_cmd chromium; then
  CHROMIUM_BIN="$(command -v chromium)"
else
  missing+=("chromium-browser")
fi

if ((${#missing[@]})); then
  echo "The following packages are missing: ${missing[*]}"
  read -r -p "Install them with apt now? [Y/n] " ans
  ans=${ans:-Y}
  if [[ "$ans" =~ ^[Yy]$ ]]; then
    sudo apt update
    # chromium-browser is a metapackage/symlink on Pi OS; chromium works too.
    sudo apt install -y ${missing[*]}
    # re-detect chromium binary after install
    if need_cmd chromium-browser; then
      CHROMIUM_BIN="$(command -v chromium-browser)"
    elif need_cmd chromium; then
      CHROMIUM_BIN="$(command -v chromium)"
    fi
  else
    echo "Cannot proceed without: ${missing[*]}"; exit 1
  fi
fi

# --- ask for URL --------------------------------------------------------------
read -r -p "Enter the kiosk URL (e.g., https://example.com): " KIOSK_URL
if [[ -z "${KIOSK_URL// }" ]]; then
  echo "URL cannot be empty."; exit 1
fi

# --- auto-detect DSI/DPI output + preferred mode ------------------------------
echo "Detecting DSI/DPI output via wlr-randrâ€¦"
mapfile -t blocks < <(wlr-randr)

OUTPUT=""
MODE=""

# Parse wlr-randr output into blocks per connector
# Then pick the first enabled DSI-* or DPI-* with a preferred/current mode.
current_name=""
enabled="no"
preferred=""
in_modes=0

parse() {
  local line name
  while IFS= read -r line; do
    if [[ "$line" =~ ^([A-Za-z0-9-]+)\  ]]; then
      # flush previous
      if [[ -n "$current_name" ]]; then
        if [[ "$enabled" == "yes" && -z "$preferred" ]]; then
          preferred="$first_mode" # fallback to first listed mode if needed
        fi
        if [[ "$current_name" =~ ^DSI-|^DPI- ]] && [[ "$enabled" == "yes" ]] && [[ -n "$preferred" ]] && [[ -z "$OUTPUT" ]]; then
          OUTPUT="$current_name"
          MODE="$preferred"
        fi
      fi
      current_name="${BASH_REMATCH[1]}"
      enabled="no"
      preferred=""
      first_mode=""
      in_modes=0
      continue
    fi

    # trim leading spaces
    line="${line#"${line%%[![:space:]]*}"}"

    if [[ "$line" =~ ^Enabled:\ (yes|no) ]]; then
      enabled="${BASH_REMATCH[1]}"
      continue
    fi
    if [[ "$line" =~ ^Modes: ]]; then
      in_modes=1
      continue
    fi
    if (( in_modes )); then
      if [[ "$line" =~ ^([0-9]+x[0-9]+)\ px,.*\(preferred,\ current\) ]]; then
        preferred="${BASH_REMATCH[1]}"
        in_modes=0
        continue
      fi
      if [[ -z "$first_mode" && "$line" =~ ^([0-9]+x[0-9]+)\ px, ]]; then
        first_mode="${BASH_REMATCH[1]}"
      fi
    fi
  done

  # flush last connector
  if [[ -n "$current_name" ]]; then
    if [[ "$enabled" == "yes" && -z "$preferred" ]]; then
      preferred="$first_mode"
    fi
    if [[ "$current_name" =~ ^DSI-|^DPI- ]] && [[ "$enabled" == "yes" ]] && [[ -n "$preferred" ]] && [[ -z "$OUTPUT" ]]; then
      OUTPUT="$current_name"
      MODE="$preferred"
    fi
  fi
}

# feed full wlr-randr output into parser
wlr-randr | parse

if [[ -z "$OUTPUT" || -z "$MODE" ]]; then
  echo "Could not auto-detect an enabled DSI/DPI output with a mode."
  echo "Run 'wlr-randr' and enter values manually."
  read -r -p "Output name (e.g., DSI-2): " OUTPUT
  read -r -p "Mode resolution (e.g., 800x1280): " MODE
  if [[ -z "$OUTPUT" || -z "$MODE" ]]; then
    echo "Output and mode are required."; exit 1
  fi
fi

read -r -p "Rotation transform [normal/90/180/270] (default: normal): " TRANSFORM
TRANSFORM=${TRANSFORM:-normal}

echo "Using output=$OUTPUT mode=$MODE transform=$TRANSFORM"
echo "Chromium binary: $CHROMIUM_BIN"

# --- write autostart ----------------------------------------------------------
AUTOSTART_DIR="$HOME/.config/labwc"
AUTOSTART_FILE="$AUTOSTART_DIR/autostart"

mkdir -p "$AUTOSTART_DIR"

if [[ -f "$AUTOSTART_FILE" ]]; then
  cp -a "$AUTOSTART_FILE" "${AUTOSTART_FILE}.bak.$(date +%s)"
  echo "Backed up existing autostart to ${AUTOSTART_FILE}.bak.*"
fi

cat > "$AUTOSTART_FILE" <<EOF
#!/bin/sh
# Auto-generated by install-chromium-kiosk.sh

OUTPUT="${OUTPUT}"
MODE="${MODE}"
TRANSFORM="${TRANSFORM}"
URL="${KIOSK_URL}"
CHROMIUM_BIN="${CHROMIUM_BIN}"

# Ensure display is configured
wlr-randr --output "\$OUTPUT" --on --mode "\$MODE" --transform "\$TRANSFORM"

# Optional backlight for official DSI (ignore if not present)
if [ -w /sys/class/backlight/rpi_backlight/brightness ]; then
  echo 200 > /sys/class/backlight/rpi_backlight/brightness
fi

# Small delay for compositor to settle
sleep 2

# Launch Chromium in kiosk on Wayland
"\$CHROMIUM_BIN" \\
  --kiosk "\$URL" \\
  --noerrdialogs --disable-infobars --incognito --disable-translate \\
  --enable-features=UseOzonePlatform --ozone-platform=wayland &
EOF

chmod +x "$AUTOSTART_FILE"

echo
echo "Installed: $AUTOSTART_FILE"
echo "On next login/boot to labwc, Chromium will start in kiosk mode on ${OUTPUT} at ${MODE}."
read -r -p "Reboot now? [y/N] " rb
if [[ "$rb" =~ ^[Yy]$ ]]; then
  sudo reboot
else
  echo "Reboot later to apply. Done."
fi
